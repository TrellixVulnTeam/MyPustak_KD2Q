{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projects\\\\Instagram Clone\\\\server\\\\client\\\\src\\\\components\\\\screens\\\\Home.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable eqeqeq */\n\n/* eslint-disable no-unused-vars */\n\n/* eslint-disable jsx-a11y/alt-text */\nimport React, { useContext, useEffect, useState } from 'react';\nimport { UserContext } from '../../App';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  _s();\n\n  //this data is to fetch all posts and store in data\n  const [data, setData] = useState([]);\n  const {\n    state,\n    dispatch\n  } = useContext(UserContext);\n  useEffect(() => {\n    fetch(\"/allposts\", {\n      headers: {\n        \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\")\n      }\n    }).then(res => res.json()).then(result => {\n      // console.log(\"All posts are fetched \", result);\n      setData(result.posts);\n    });\n  }, []);\n\n  const likePost = id => {\n    fetch('/like', {\n      method: \"put\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\")\n      },\n      //we are sending data to body so it will be recieved in req.body.postId\n      body: JSON.stringify({\n        postId: id\n      })\n    }).then(res => res.json()).then(result => {\n      // console.log(\"ye naya result hain\", result);\n      // A re-render can only be triggered if a component's state has changed\n      const newData = data.map(item => {\n        if (item._id == result._id) {\n          return result;\n        } else {\n          return item;\n        }\n      });\n      setData(newData);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const unlikePost = id => {\n    fetch('/unlike', {\n      method: \"put\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\")\n      },\n      body: JSON.stringify({\n        postId: id\n      })\n    }).then(res => res.json()).then(result => {\n      // console.log(\"ye naya result hain\", result);\n      // A re-render can only be triggered if a component's state has changed\n      const newData = data.map(item => {\n        if (item._id == result._id) {\n          return result;\n        } else {\n          return item;\n        }\n      });\n      setData(newData);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const makeComment = (text, postId) => {\n    fetch('/comment', {\n      method: \"put\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\")\n      },\n      body: JSON.stringify({\n        postId,\n        text\n      })\n    }).then(res => res.json()).then(result => {\n      console.log(\"ye naya result hain\", result); // A re-render can only be triggered if a component's state has changed\n\n      const newData = data.map(item => {\n        if (item._id === result._id) {\n          return result;\n        } else {\n          return item;\n        }\n      });\n      setData(newData);\n    }).catch(err => console.log(err));\n  };\n\n  const deletePost = postid => {\n    fetch('/deletePost/' + postid, {\n      method: \"delete\",\n      headers: {\n        \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\")\n      }\n    }).then(res => res.json()).then(result => {\n      // console.log(result);\n      const newData = data.filter(item => {\n        return item._id !== result._id;\n      });\n      setData(newData);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: data.map(item => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card home-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            class: \"post-user-name\",\n            to: item.postedBy._id !== state._id ? \"/profile/\" + item.postedBy._id : \"/profile\",\n            children: item.postedBy.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 33\n          }, this), item.postedBy._id === state._id && /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"material-icons deletePostIcon\",\n            onClick: () => deletePost(item._id),\n            children: \"delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-image\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"post-image\",\n            src: item.photo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"like-dislike\",\n            children: [item.likes.includes(state._id) ? /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"material-icons\",\n              onClick: () => unlikePost(item._id),\n              children: \"thumb_down\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 45\n            }, this) : /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"material-icons\",\n              onClick: () => likePost(item._id),\n              children: \"thumb_up\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [item.likes.length, \" likes\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n            children: item.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: item.body\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"#fafafa grey lighten-5\",\n            children: [item.comments.length, \" comments\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 33\n          }, this), item.comments.map(record => {\n            return /*#__PURE__*/_jsxDEV(\"h6\", {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"comment-name\",\n                children: record.postedBy.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 67\n              }, this), \" \", record.text]\n            }, record._id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 45\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: e => {\n              e.preventDefault();\n              makeComment(e.target[0].value, item._id);\n            },\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"add a comment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 29\n        }, this)]\n      }, item._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 25\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Home, \"ZmleO6q+fEEwrf8wTg379n8qMIw=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["E:/Projects/Instagram Clone/server/client/src/components/screens/Home.js"],"names":["React","useContext","useEffect","useState","UserContext","Link","Home","data","setData","state","dispatch","fetch","headers","localStorage","getItem","then","res","json","result","posts","likePost","id","method","body","JSON","stringify","postId","newData","map","item","_id","catch","err","console","log","unlikePost","makeComment","text","deletePost","postid","filter","postedBy","name","photo","likes","includes","length","title","comments","record","e","preventDefault","target","value"],"mappings":"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","sourcesContent":["/* eslint-disable eqeqeq */\r\n/* eslint-disable no-unused-vars */\r\n/* eslint-disable jsx-a11y/alt-text */\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport { UserContext } from '../../App';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Home = () => {\r\n    //this data is to fetch all posts and store in data\r\n    const [data, setData] = useState([]);\r\n    const { state, dispatch } = useContext(UserContext);\r\n\r\n    useEffect(() => {\r\n        fetch(\"/allposts\", {\r\n            headers: {\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\")\r\n            }\r\n        })\r\n            .then(res => res.json())\r\n            .then(result => {\r\n                // console.log(\"All posts are fetched \", result);\r\n                setData(result.posts);\r\n            })\r\n    }, []);\r\n\r\n    const likePost = (id) => {\r\n        fetch('/like', {\r\n            method: \"put\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\")\r\n            },\r\n            //we are sending data to body so it will be recieved in req.body.postId\r\n            body: JSON.stringify({\r\n                postId: id\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(result => {\r\n                // console.log(\"ye naya result hain\", result);\r\n                // A re-render can only be triggered if a component's state has changed\r\n                const newData = data.map(item => {\r\n                    if (item._id == result._id) {\r\n                        return result;\r\n                    }\r\n                    else {\r\n                        return item;\r\n                    }\r\n                })\r\n                setData(newData);\r\n            })\r\n            .catch(err => { console.log(err) });\r\n    }\r\n    const unlikePost = (id) => {\r\n        fetch('/unlike', {\r\n            method: \"put\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\")\r\n            },\r\n            body: JSON.stringify({\r\n                postId: id\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(result => {\r\n                // console.log(\"ye naya result hain\", result);\r\n                // A re-render can only be triggered if a component's state has changed\r\n                const newData = data.map(item => {\r\n                    if (item._id == result._id) {\r\n                        return result;\r\n                    }\r\n                    else {\r\n                        return item;\r\n                    }\r\n                })\r\n                setData(newData);\r\n            })\r\n            .catch(err => { console.log(err) });\r\n    }\r\n    const makeComment = (text, postId) => {\r\n        fetch('/comment', {\r\n            method: \"put\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\")\r\n            },\r\n            body: JSON.stringify({\r\n                postId,\r\n                text\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(result => {\r\n                console.log(\"ye naya result hain\", result);\r\n                // A re-render can only be triggered if a component's state has changed\r\n                const newData = data.map(item => {\r\n                    if (item._id === result._id) {\r\n                        return result;\r\n                    }\r\n                    else {\r\n                        return item;\r\n                    }\r\n                })\r\n                setData(newData);\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n    const deletePost = (postid) => {\r\n        fetch('/deletePost/' + postid, {\r\n            method: \"delete\",\r\n            headers: {\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\")\r\n            }\r\n        })\r\n            .then(res => res.json())\r\n            .then(result => {\r\n                // console.log(result);\r\n                const newData = data.filter(item => {\r\n                    return item._id !== result._id;\r\n                })\r\n                setData(newData);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            {\r\n                data.map(item => {\r\n                    return (\r\n                        <div className=\"card home-card\" key={item._id}>\r\n\r\n                            <h5 >\r\n                                <Link class=\"post-user-name\" to={item.postedBy._id !== state._id ? \"/profile/\" + item.postedBy._id : \"/profile\"}>{item.postedBy.name}</Link>\r\n                                {\r\n                                    item.postedBy._id === state._id &&\r\n                                    <i className=\"material-icons deletePostIcon\"\r\n                                        onClick={() => deletePost(item._id)}>\r\n                                        delete\r\n                                    </i>\r\n                                }\r\n                            </h5>\r\n                            <div className=\"card-image\">\r\n                                <img className=\"post-image\" src={item.photo} />\r\n                            </div>\r\n                            <div className=\"card-content\">\r\n                                <div className=\"like-dislike\">\r\n                                    {\r\n                                        item.likes.includes(state._id) ?\r\n                                            <i className=\"material-icons\" onClick={() => unlikePost(item._id)}>thumb_down</i>\r\n                                            :\r\n                                            <i className=\"material-icons\" onClick={() => likePost(item._id)}>thumb_up</i>\r\n                                    }\r\n                                    <span>{item.likes.length} likes</span>\r\n                                </div>\r\n                                <h6>{item.title}</h6>\r\n                                <p>{item.body}</p>\r\n                                <p className=\"#fafafa grey lighten-5\">{item.comments.length} comments</p>\r\n                                {\r\n                                    item.comments.map(record => {\r\n                                        return (\r\n                                            <h6 key={record._id} ><span className=\"comment-name\">{record.postedBy.name}</span> {record.text}</h6>\r\n                                        )\r\n                                    })\r\n                                }\r\n                                <form onSubmit={(e) => {\r\n                                    e.preventDefault()\r\n                                    makeComment(e.target[0].value, item._id)\r\n                                }}>\r\n                                    <input type=\"text\" placeholder=\"add a comment\" />\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </div >\r\n    )\r\n};\r\n\r\nexport default Home"]},"metadata":{},"sourceType":"module"}